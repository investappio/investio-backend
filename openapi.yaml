openapi: "3.0.0"
info:
  title: Invest.io
  version: "1.0"
  description: "API definition for the Invest.io app"
servers:
  - url: "http://localhost:3000"
paths:
  /auth/register:
    parameters: []
    post:
      summary: "Create a new user and authenticate them"
      operationId: post-auth-register
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  user:
                    $ref: "#/components/schemas/User"
                required:
                  - success
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                phone:
                  type: string
                email:
                  type: string
                password:
                  type: string
                dob:
                  type: string
                  format: date-time
                name:
                  type: string
              required:
                - username
                - email
                - password
                - dob
                - name
      description: Create and authenticate a new user
      security: []
  /auth/login:
    post:
      summary: "Authenticate a user by email or username"
      operationId: post-auth-login
      responses:
        "200":
          description: User authenticated
          content:
            application/json:
              schema:
                description: ""
                type: object
                properties:
                  success:
                    type: boolean
                  user:
                    $ref: "#/components/schemas/User"
                required:
                  - success
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    username:
                      type: string
                    password:
                      type: string
                  required:
                    - username
                    - password
                - type: object
                  properties:
                    email:
                      type: string
                    password:
                      type: string
                  required:
                    - email
                    - password
        description: ""
      description: Login and authneticate a user
      security: []
    parameters: []
  /user/profile:
    get:
      summary: "Get the current user's profile"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  profile:
                    $ref: "#/components/schemas/User"
  /user/{user}/:
    get:
      summary: "Get a user's profile"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  profile:
                    $ref: "#/components/schemas/User"
      parameters:
        - schema:
            type: string
          name: user
          in: path
          description: Username of a user
          required: true

  /user/search:
    get:
      summary: "General search for a user"
      tags: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
      operationId: get-user-search
      parameters:
        - schema:
            type: string
          in: query
          name: query
          description: Username of user being searched
          required: true
      description: Search for users by username
  /user/{user}/follow:
    post:
      summary: "Follow another user"
      operationId: post-user-follow
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
      parameters:
        - schema:
            type: string
          in: path
          name: user
          description: Username of the user being followed
          required: true
      description: Follow another user by their User Object ID
  /user/{user}/following:
    get:
      summary: "Get a user's following status for another user"
      operationId: get-user-following
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  following:
                    type: boolean
      parameters:
        - schema:
            type: string
          in: path
          name: user
          description: Username of the user to fetch follow status for
          required: true
      description: Check if the current user follows another user
  /user/{user}/portfolio:
    get:
      summary: "Get a user's portfolio by username"
      operationId: get-other-user-portfolio
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  portfolio:
                    $ref: "#/components/schemas/Portfolio"
      parameters:
        - schema:
            type: string
          in: path
          name: user
          description: Username of the user to fetch the portfolio from
          required: true
      description: Get a user's portfolio by username
  /user/portfolio:
    get:
      summary: "Get the current user's portfolio"
      operationId: get-user-portfolio
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  portfolio:
                    $ref: "#/components/schemas/Portfolio"
      description: Get the portfolio of the current user
  /user/portfolio/historical/{range}:
    get:
      summary: "Get the current user's portfolio history by range"
      operationId: get-user-portfolio-historical
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  history:
                    type: array
                    items:
                      $ref: "#/components/schemas/PortfolioHistory"
      parameters:
        - schema:
            type: string
            enum:
              - 2w
              - 3m
              - 1y
          in: path
          name: range
          required: true
          description: Interval to get prices from
      description: Get the portfolio history of the current user
  /user/leaderboard:
    get:
      summary: "Get the global leaderboard of portfolios"
      operationId: get-portfolio-leaderboard
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  leaderboard:
                    type: array
                    items:
                      $ref: "#/components/schemas/PortfolioHistory"
      parameters:
        - schema:
            type: integer
            minimum: 1
          in: query
          name: count
          description: Number of portfolios to return
      description: Get the portfolio of the current user
  /assets/gainers:
    get:
      summary: "Get the top gaining assets from previous day"
      operationId: get-assets-gainers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  assets:
                    type: array
                    items:
                      $ref: "#/components/schemas/Price"
      description: Fetch the top gaining assets
      parameters:
        - schema:
            type: integer
            minimum: 1
          in: query
          name: count
          description: Number of assets to return
  /assets/search:
    get:
      summary: "General search for assets"
      operationId: get-assets-search
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  assets:
                    type: array
                    items:
                      $ref: "#/components/schemas/Asset"
      description: Search for assets by name or symbol
      parameters:
        - schema:
            type: string
          in: query
          name: query
          description: Name or symbol of searched asset
  /assets/quotes:
    get:
      summary: "Get recent pricing for multiple assets"
      operationId: get-asset-quotes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  quotes:
                    type: object
                    additionalProperties:
                      type: number
                      minimum: 0
      description: Get the latest quote for multiple quotes
      parameters:
        - schema:
            type: string
          in: query
          name: symbols
          required: true
          description: Comma seperated string of symbols to get get quotes for
  /assets/{symbol}/quote:
    get:
      summary: "Get a asset's recent pricing"
      operationId: get-assets-quote
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  quote:
                    type: number
                    minimum: 0
      description: Get a asset's latest quote
      parameters:
        - schema:
            type: string
          in: path
          name: symbol
          required: true
          description: Symbol of the asset to get the quote of
  /assets/{symbol}/price/historical/{range}:
    get:
      summary: "Get a asset's historical price data"
      operationId: get-assets-price-history
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  prices:
                    type: array
                    items:
                      $ref: "#/components/schemas/Price"
      description: Get a asset's historical prices
      parameters:
        - schema:
            type: string
          in: path
          name: symbol
          required: true
          description: Symbol of the asset to get the price history of
        - schema:
            type: string
            enum:
              - 2w
              - 3m
              - 1y
          in: path
          name: range
          required: true
          description: Interval to get prices from
  /assets/{symbol}/buy:
    post:
      summary: "Buy a asset for a user"
      operationId: post-assets-buy
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
      description: Purchase a asset for the logged in user
      parameters:
        - schema:
            type: string
          in: path
          name: symbol
          required: true
          description: Symbol of the asset to purchase
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    qty:
                      type: number
                      minimum: 0
                - type: object
                  properties:
                    notional:
                      type: number
                      minimum: 0
  /assets/{symbol}/sell:
    post:
      summary: "Sell a user's asset"
      operationId: post-assets-sell
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
      description: Sell a asset for the logged in user
      parameters:
        - schema:
            type: string
          in: path
          name: symbol
          required: true
          description: Symbol of the asset to sell
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    qty:
                      type: number
                      minimum: 0
                - type: object
                  properties:
                    notional:
                      type: number
                      minimum: 0
components:
  schemas:
    User:
      title: User
      type: object
      description: "Schema respresenting a user account"
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        dob:
          type: string
          format: date-time
        username:
          type: string
          description: Set to true if the user's email has been verified.
        phone:
          type: string
      required:
        - name
        - email
        - dob
        - username
    Portfolio:
      title: Portfolio
      type: object
      description: "Schema respresenting a user's portfolio"
      properties:
        assets:
          type: object
          additionalProperties:
            type: number
        cash:
          type: number
        value:
          type: number
        user:
          $ref: "#/components/schemas/User"
      required:
        - cash
        - assets
    PortfolioHistory:
      title: Portfolio History
      type: object
      description: Schema representing the historical state of a portfolio
      properties:
        timestamp:
          type: string
          format: date-time
        cash:
          type: number
          minimum: 0
        portfolio:
          $ref: "#/components/schemas/Portfolio"
        user:
          $ref: "#/components/schemas/User"
    Asset:
      title: Asset
      description: "Schema respresenting a asset asset"
      type: object
      properties:
        symbol:
          type: string
        name:
          type: string
        class:
          type: string
        exchange:
          type: string
        active:
          type: boolean
      required:
        - symbol
        - name
        - class
        - exchange
        - active
    Price:
      title: Price
      description: "Schema respresenting pricing information on a specific date for a asset"
      type: object
      properties:
        symbol:
          type: string
        timestamp:
          type: string
          format: date-time
        open:
          type: number
        high:
          type: number
        low:
          type: number
        close:
          type: number
        volume:
          type: number
        average:
          type: number
        change:
          type: number
      required:
        - symbol
        - timestamp
        - open
        - high
        - low
        - close
        - volume
        - average
        - change
        - changePercent
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security: [bearerAuth: []]
