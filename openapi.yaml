openapi: "3.0.0"
info:
  title: Invest.io
  version: "1.0"
  description: "API definition for the Invest.io app"
servers:
  - url: "http://localhost:3000"
paths:
  /auth/register:
    parameters: []
    post:
      summary: "Create a new user and authenticate them"
      operationId: post-auth-register
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  user:
                    $ref: "#/components/schemas/User"
                required:
                  - success
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                phone:
                  type: string
                email:
                  type: string
                password:
                  type: string
                dob:
                  type: string
                  format: date-time
                name:
                  type: string
              required:
                - username
                - email
                - password
                - dob
                - name
      description: Create and authenticate a new user
      security: []
  /auth/login:
    post:
      summary: "Authenticate a user by email or username"
      operationId: post-auth-login
      responses:
        "200":
          description: User authenticated
          content:
            application/json:
              schema:
                description: ""
                type: object
                properties:
                  success:
                    type: boolean
                  user:
                    $ref: "#/components/schemas/User"
                required:
                  - success
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    username:
                      type: string
                    password:
                      type: string
                  required:
                    - username
                    - password
                - type: object
                  properties:
                    email:
                      type: string
                    password:
                      type: string
                  required:
                    - email
                    - password
        description: ""
      description: Login and authneticate a user
      security: []
    parameters: []
  /user/search:
    get:
      summary: "General search for a user"
      tags: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
      operationId: get-user-search
      parameters:
        - schema:
            type: string
          in: query
          name: query
          description: Username of user being searched
          required: true
      description: Search for users by username
  /user/follow:
    post:
      summary: "Follow another user"
      operationId: post-user-follow
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                uid:
                  $ref: "#/components/schemas/User"
              required:
                - uid
      description: Follow another user by their User Object ID
  /user/portfolio:
    get:
      summary: "Get the current user's portfolio"
      operationId: get-user-portfolio
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  portfolio:
                    $ref: "#/components/schemas/Portfolio"
      description: Get the portfolio of the current user
  /stocks/gainers:
    get:
      summary: "Get the top gaining stocks from previous day"
      operationId: get-stocks-gainers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  stocks:
                    type: array
                    items:
                      $ref: "#/components/schemas/Stock"
      description: Fetch the top gaining stocks
      parameters:
        - schema:
            type: integer
            minimum: 1
          in: query
          name: count
          description: Number of stocks to return
  /stocks/search:
    get:
      summary: "General search for stocks"
      operationId: get-stocks-search
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  stocks:
                    type: array
                    items:
                      $ref: "#/components/schemas/Stock"
      description: Search for stocks by name or symbol
      parameters:
        - schema:
            type: string
          in: query
          name: query
          description: Name or symbol of searched stock
  /stocks/{symbol}/price:
    get:
      summary: "Get a stock's recent pricing"
      operationId: get-stocks-price
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  price:
                    type: number
                    minimum: 0
      description: Get a stock's recent price
      parameters:
        - schema:
            type: string
          in: path
          name: symbol
          required: true
          description: Symbol of the stock to get the price of
  /stocks/{symbol}/price/historical:
    get:
      summary: "Get a stock's historical price data"
      operationId: get-stocks-pricehistory
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  prices:
                    type: array
                    items:
                      $ref: "#/components/schemas/Price"
      description: Get a stock's historical prices
      parameters:
        - schema:
            type: string
          in: path
          name: symbol
          required: true
          description: Symbol of the stock to get the price history of
        - schema:
            type: integer
            minimum: 0
          in: query
          name: days
          description: Interval of previous days to get prices for
        - schema:
            type: integer
            minimum: 0
          in: query
          name: weeks
          description: Interval of previous weeks to get prices for
        - schema:
            type: integer
            minimum: 0
          in: query
          name: months
          description: Interval of previous months to get prices for
        - schema:
            type: integer
            minimum: 0
          in: query
          name: years
          description: Interval of previous years to get prices for
        - schema:
            type: string
            format: date-time
          in: query
          name: date
          description: Start date to get historic prices from
  /stocks/{symbol}/buy:
    post:
      summary: "Buy a stock for a user"
      operationId: post-stocks-buy
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  portfolio:
                    $ref: "#/components/schemas/Portfolio"
      description: Purchase a stock for the logged in user
      parameters:
        - schema:
            type: string
          in: path
          name: symbol
          required: true
          description: Symbol of the stock to purchase
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: number
                  minimum: 0
  /stocks/{symbol}/sell:
    post:
      summary: "Sell a user's stock"
      operationId: post-stocks-sell
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  portfolio:
                    $ref: "#/components/schemas/Portfolio"
      description: Sell a stock for the logged in user
      parameters:
        - schema:
            type: string
          in: path
          name: symbol
          required: true
          description: Symbol of the stock to sell
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: number
                  minimum: 0
components:
  schemas:
    User:
      title: User
      type: object
      description: "Schema respresenting a user account"
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        dob:
          type: string
          format: date-time
        username:
          type: string
          description: Set to true if the user's email has been verified.
        phone:
          type: string
      required:
        - name
        - email
        - dob
        - username
    Portfolio:
      title: Portfolio
      type: object
      description: "Schema respresenting a user's portfolio"
      properties:
        assets:
          type: array
          items:
            type: object
            properties:
              quantity:
                type: number
              stock:
                $ref: "#/components/schemas/Stock"
        cash:
          type: number
        value:
          type: number
        user:
          $ref: "#/components/schemas/User"
      required:
        - balance
        - assets
    Stock:
      title: Stock
      description: "Schema respresenting a stock"
      type: object
      properties:
        symbol:
          type: string
        name:
          type: string
        type:
          type: string
        price:
          $ref: "#/components/schemas/Price"
      required:
        - symbol
        - name
        - type
        - price
    Price:
      title: Price
      description: "Schema respresenting neccesary information on a specific date for a stock"
      type: object
      properties:
        close:
          type: number
        high:
          type: number
        low:
          type: number
        open:
          type: number
        symbol:
          type: string
        volume:
          type: number
        date:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
        changePercent:
          type: number
      required:
        - symbol
        - close
        - high
        - low
        - open
        - date
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security: [bearerAuth: []]
